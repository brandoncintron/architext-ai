"""
@file Defines the Pydantic models for data validation and structured output.
"""
from pydantic import BaseModel, Field
from typing import List, Literal

class Question(BaseModel):
    """A single, dynamically generated question to be asked to the user."""
    type: Literal["single-choice", "multi-choice"] = Field(
        ...,
        description='The type of question, either "single-choice" or "multi-choice".'
    )
    question: str = Field(
        ...,
        description="The exact, user-facing question to be asked, generated by the AI."
    )
    options: List[str] = Field(
        ...,
        description="A list of clear, concise, and distinct options for the user to choose from."
    )

class QuestionRouter(BaseModel):
    """
    The router for determining which questions to ask the user based on their initial idea.
    It MUST generate between 3 to 5 questions.
    """
    questions: List[Question] = Field(
        ...,
        description="A list of 3 to 5 dynamically generated questions to ask the user."
    )

class TDD(BaseModel):
    """The final, complete Technical Design Document."""
    tdd: str = Field(
        ...,
        description="The complete TDD in Markdown format, following the standardized structure."
    )

class ProjectIdeaValidator(BaseModel):
    """
    Validates whether the user's input is a software project idea or a general question.
    """
    is_project_idea: bool = Field(
        ...,
        description="True if the input is a plausible software project idea, False otherwise."
    )
    reason: str = Field(
        ...,
        description="A brief explanation for the classification, especially if it's not a project idea."
    )
